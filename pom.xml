<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.vo2</groupId>
    <artifactId>pronto-force</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>ProntoForce</name>
    <description>REST/WEB Spring Boot App</description>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.4.3.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
        <docker.image.prefix>javatest</docker.image.prefix>
        <surefire.skip>false</surefire.skip>
    </properties>

    <dependencies>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <dependency>
            <groupId>org.hsqldb</groupId>
            <artifactId>hsqldb</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- prod database -->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>9.4-1206-jdbc42</version>
        </dependency>

        <dependency>
            <groupId>org.liquibase</groupId>
            <artifactId>liquibase-core</artifactId>
        </dependency>

        <!-- for h2 console -->
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>

            <!--
                Unit Tests (UT)
                by default are included : **/Test*.java, **/*Test.java, **/*TestCase.java
                we add an exclusion by command line -Dsurefire.skip=true.
                UT are excluded on docker profile (or -Docker command line argument)
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.19</version>
                <configuration>
                    <skip>${surefire.skip}</skip>
                </configuration>
            </plugin>

            <!--
                   Integration Tests (IT)
                   by default are included : **/IT*.java, **/*IT.java, **/*ITCase.java
                   we add an exclusion by pattern **/**DockerIT.java
                   (which should be run with a profile docker or switch -Docker)
             -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>2.19.1</version>
                <configuration>
                    <excludes>
                        <exclude>**/**DockerIT.java</exclude>
                    </excludes>
                    <!-- the plugin excludes project classpath but with spring boot you may need it to use spring tests -->
                    <additionalClasspathElements>
                        <additionalClasspathElement>target/classes</additionalClasspathElement>
                    </additionalClasspathElements>
                </configuration>
                <executions>
                    <execution>
                        <id>integration-test</id>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

        </plugins>
    </build>

    <!--
        Docker config for integration tests ending with **/**DockerIT.java
        If you need to run specific tests on specific machines MachineA for a test A, MachineB for test B etc..
        without running all machines together but only before test they start and and then shutdown after test ends
        =>
        1. Create a copy of this profile and set names to dockerMachineA, dockerMachineB
        2. keep the same activation rule (-Docker ) to run all tests of docker machines or group them by
            -DockerGroupOne, -DockerGroupTwo .. if you want to run just parts of tests
        3. change inclusion rule to more specific name : <include>**/**MachineADockerIT.java</include>
            and name your tests according to
    -->
    <profiles>

        <profile>
            <id>docker</id>
            <activation>
                <property>
                    <name>ocker</name>
                </property>
            </activation>
            <properties>
                <host.port>80</host.port>
            </properties>
            <build>
                <finalName>${project.artifactId}-docker</finalName>
                <plugins>
                    <!-- include only **DockerIT.java in integration tests  -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <configuration>
                            <includes>
                                <include>**/**DockerIT.java</include>
                            </includes>
                            <excludes>
                                <exclude>**/**IT.java]</exclude>
                            </excludes>
                        </configuration>
                    </plugin>
                    <!-- skip all Unit Tests -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <configuration>
                            <skip>true</skip>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>io.fabric8</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <version>0.19.0</version>

                        <!-- attach plugin lifecycle to integration tests phase -->
                        <!-- Connect start/stop to pre- and post-integration-test phase, respectively if you want
                        to start your docker containers during integration tests -->
                        <executions>

                            <execution>
                                <id>start-container</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <!-- "build" should be used to create the images with the
                                         artifact -->
                                    <goal>build</goal>
                                    <goal>start</goal>
                                </goals>

                                <!-- docker running on port 8080 of container but accessible on host.port to host  -->
                                <configuration>
                                    <dockerHost>http://127.0.0.1:2375</dockerHost>
                                    <verbose>true</verbose>
                                    <images>
                                        <image>
                                            <name>vo2/${project.artifactId}</name>
                                            <build>
                                                <dockerFile>Dockerfile</dockerFile>
                                                <assembly>
                                                    <descriptorRef>artifact</descriptorRef>
                                                </assembly>
                                            </build>
                                            <run>
                                                <ports>host.port:8080</ports>
                                                <log>
                                                    <prefix>WEB------->></prefix>
                                                    <date>NONE</date>
                                                </log>
                                                <wait>
                                                    <!--<http>-->
                                                    <!--<url>http://localhost:${host.port}</url>-->
                                                    <!--<method>GET</method>-->
                                                    <!--<status>200</status>-->
                                                    <!--</http>-->
                                                    <log>Tomcat started on port</log>
                                                    <time>20000</time>
                                                </wait>
                                                <links>
                                                    <!-- hostname in the docker network  (as used for db conf in application-postgres.properties) -->
                                                    <link>database:postgres</link>
                                                </links>
                                            </run>
                                        </image>
                                        <image>
                                            <alias>database</alias>
                                            <name>postgres</name>
                                            <run>
                                                <env>
                                                    <POSTGRES_PASSWORD>passw0rd</POSTGRES_PASSWORD>
                                                </env>
                                                <log>
                                                    <prefix>POSTGRES-->></prefix>
                                                    <date>NONE</date>
                                                </log>
                                                <wait>
                                                    <log>database system is ready to accept connections</log>
                                                    <time>20000</time>
                                                </wait>
                                            </run>
                                        </image>
                                    </images>
                                </configuration>

                            </execution>

                            <execution>
                                <id>stop-container</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>stop</goal>
                                </goals>
                            </execution>

                        </executions>

                    </plugin>

                </plugins>
            </build>
        </profile>
    </profiles>


</project>
